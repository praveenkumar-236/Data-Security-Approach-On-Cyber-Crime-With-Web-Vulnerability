import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import metrics
import seaborn as sd

df_train_X= pd.read_csv('kddcup.csv')
df_train_y=df_train_X["label"]
df_train_X=df_train_X.iloc[:,:20]
from sklearn.preprocessing import LabelEncoder

number = LabelEncoder()

df_train_X['proto'] = number.fit_transform(df_train_X['proto'].astype(str))
df_train_X['service'] = number.fit_transform(df_train_X['service'].astype(str))
df_train_X['state'] = number.fit_transform(df_train_X['state'].astype(str))
#df_train_X['attack_cat'] = number.fit_transform(df_train_X['attack_cat'].astype(str))
print("==================================================")
print("KddCup Dataset")
print(" Preprocessing")
print("==================================================")

df_train_X.head(5)
from sklearn.model_selection import train_test_split



x_train,x_test,y_train,y_test = train_test_split(df_train_X,df_train_y,test_size = 0.30,random_state = 42)

from sklearn.ensemble import RandomForestClassifier

rf= RandomForestClassifier(n_estimators = 10)  
rf.fit(x_train, y_train)
rf_prediction = rf.predict(x_test)
Result_2=accuracy_score(y_test, rf_prediction)*100
from sklearn.metrics import confusion_matrix

print()
print("---------------------------------------------------------------------")
print("Random Forest")
print()
print(metrics.classification_report(y_test,rf_prediction))
print()
print("Random Forest Accuracy is:",Result_2,'%')
print()
print("Confusion Matrix:")
cm2=confusion_matrix(y_test, rf_prediction)
print(cm2)
print("-------------------------------------------------------")
print()
import matplotlib.pyplot as plt
import seaborn as sns

sns.heatmap(cm2, annot = True, cmap ='plasma',
        linecolor ='black', linewidths = 1)
plt.show()
from sklearn.metrics import roc_curve

fpr, tpr, _ = roc_curve(y_test, rf_prediction)
plt.plot(fpr, tpr, marker='.', label='RF')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()



x_train=np.expand_dims(x_train, axis=2)
x_test=np.expand_dims(x_test, axis=2)
y_train=np.expand_dims(y_train,axis=1)
y_test=np.expand_dims(y_test,axis=1)


"LSTM Algorithm "
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout, Activation
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D

nb_out = 1
model = Sequential()
model.add(LSTM(input_shape=(20, 1), units=100, return_sequences=True))
model.add(Dropout(0.2))
model.add(Conv1D(filters=64, kernel_size=3, padding='same', activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=nb_out))
model.add(Activation("linear"))
model.compile(loss='mse', optimizer='sgd', metrics=['accuracy'])

print(model.summary())
# fit the model
model.fit(x_train, y_train, epochs=1, batch_size=1, verbose=1)
Result_3=model.evaluate(x_train,y_train,verbose=1)[1]*100
#from sklearn.metrics import accuracy_score
from sklearn import metrics

LSTM_prediction = model.predict(x_test)
from sklearn.metrics import confusion_matrix

print()
print("---------------------------------------------------------------------")
print(" LSTM")
print()
print(metrics.classification_report(y_test,LSTM_prediction.round()))
print()
print("LSTM  Accuracy is:",Result_3,'%')
print()
print("Confusion Matrix:")
cm2=confusion_matrix(y_test, LSTM_prediction.round())
print(cm2)
print("-------------------------------------------------------")
print()
import matplotlib.pyplot as plt
import seaborn as sns

sns.heatmap(cm2, annot = True, cmap ='plasma',
        linecolor ='black', linewidths = 1)
plt.show()
from sklearn.metrics import roc_curve
fpr, tpr, _ = roc_curve(y_test, LSTM_prediction.round())
plt.plot(fpr, tpr, marker='.', label='Hybird CNNLSTM')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()



#for i in range (len(rf_prediction)):
#    if (rf_prediction[i] ==True ):
#        print("Attack ")
#    else:
#        print("Not Attack")
    
inp=int(input('Enter the Attack id'))
if (rf_prediction[inp] ==True ):
    print("Attack ")
else:
    print("Not Attack")
    
    
    
fig = plt.figure(figsize=(6, 4.5))
ax = fig.add_axes([0,0,1,1])
yaxis = [Result_2,Result_3]
xaxis=['RANDOMFOREST','LSTM']
sd.barplot(xaxis,yaxis)
plt.style.context('default')
plt.title('COMPARISON PLOT',size=13,weight='bold')
plt.show()    
    
#data1=df[df['attack_cat'].str.contains('DoS')]
 
   
#import smtplib, ssl
#
#port = 587  # For starttls
#smtp_server = "smtp.gmail.com"
#sender_email = "shanvb18@gmail.com"
#receiver_email = "shanvb18@gmail.com"
#print("Mail Passord")
#password = input("Enter Your Mail Password:")
#message =file = data1
#
#context = ssl.create_default_context()
#with smtplib.SMTP(smtp_server, port) as server:
#    server.ehlo()  # Can be omitted
#    server.starttls(context=context)
#    server.ehlo()  # Can be omitted
#    server.login(sender_email, password)
#    server.sendmail(sender_email, receiver_email, message)
#print("Sending the mail Successfully")     
#    